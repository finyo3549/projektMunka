<!--  GameWindow declaration with a class reference, namespaces, and window properties  -->
<Window
    x:Class="MagicQuizDesktop.View.Windows.GameWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:fa="http://schemas.awesome.incremented/wpf/xaml/fontawesome.sharp"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:mw="clr-namespace:MagicQuizDesktop.ViewModels"
    Title="GameWindow"
    Width="900"
    Height="600"
    AllowsTransparency="True"
    Background="Transparent"
    FontFamily="{DynamicResource IrishGroverFont}"
    MouseDown="Window_MouseDown"
    ResizeMode="NoResize"
    WindowStartupLocation="CenterScreen"
    WindowStyle="None"
    mc:Ignorable="d">

    <!--  Data context for the window defined to use GameViewModel  -->
    <Window.DataContext>
        <mw:GameViewModel />
    </Window.DataContext>

    <!--  Resource dictionary to store converters and styles used within the window  -->
    <Window.Resources>
        <BooleanToVisibilityConverter x:Key="BoolToVis" />
    </Window.Resources>

    <!--  Main container with rounded corners and a background image  -->
    <Border CornerRadius="12">
        <Border.Background>
            <ImageBrush ImageSource="/Media/GalaxyBackground.jpg" Stretch="UniformToFill" />
        </Border.Background>

        <!--  Grid layout to organize content into rows and columns  -->
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
                <RowDefinition Height="300" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition />
                <ColumnDefinition Width="auto" />
            </Grid.ColumnDefinitions>


            <!--  Decorative border around the main content area  -->
            <Border
                Grid.RowSpan="2"
                Grid.ColumnSpan="3"
                Margin="5"
                BorderThickness="4"
                CornerRadius="10"
                Opacity="0.7">

                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                        <GradientStop Offset="0" Color="{StaticResource winBorderColor1}" />
                        <GradientStop Offset="0.75" Color="{StaticResource winBorderColor2}" />
                        <GradientStop Offset="1" Color="{StaticResource winBorderColor3}" />
                    </LinearGradientBrush>
                </Border.BorderBrush>
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                        <GradientStop Offset="0" Color="{StaticResource primaryBackColor1}" />
                        <GradientStop Offset="1" Color="{StaticResource primaryBackColor2}" />
                    </LinearGradientBrush>
                </Border.Background>

            </Border>

            <!--  Decorative border around the second content area  -->
            <Border
                Grid.Row="2"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Margin="5"
                BorderThickness="4"
                CornerRadius="10"
                Opacity="0.7">

                <Border.BorderBrush>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                        <GradientStop Offset="0" Color="{StaticResource winBorderColor1}" />
                        <GradientStop Offset="0.75" Color="{StaticResource winBorderColor2}" />
                        <GradientStop Offset="1" Color="{StaticResource winBorderColor3}" />
                    </LinearGradientBrush>
                </Border.BorderBrush>
                <Border.Background>
                    <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                        <GradientStop Offset="0" Color="{StaticResource primaryBackColor1}" />
                        <GradientStop Offset="1" Color="{StaticResource primaryBackColor2}" />
                    </LinearGradientBrush>
                </Border.Background>

            </Border>

            <!--  Title display area  -->
            <TextBlock
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Margin="18,0,0,0"
                VerticalAlignment="Center"
                FontSize="15"
                FontWeight="Bold"
                Foreground="DarkGray"
                Text="Játék" />

            <!--  Clock and window control buttons in the top right corner  -->
            <Grid
                Grid.Row="0"
                Grid.Column="2"
                Margin="10">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" />
                </Grid.RowDefinitions>

                <!--  Clock display bound to a ViewModel property  -->
                <TextBlock
                    Grid.Column="0"
                    Margin="2"
                    VerticalAlignment="Center"
                    FontSize="20"
                    Foreground="White"
                    Text="{Binding Clock}" />

                <!--  Minimize and close buttons  -->
                <Grid
                    Grid.Column="1"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center">

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <!--  Minimize button with style and interaction defined  -->
                    <Button
                        x:Name="BtnMinimize"
                        Margin="5"
                        BorderThickness="0"
                        Click="BtnMinimize_Click"
                        Content="-"
                        Cursor="Hand"
                        FontFamily="Montserrat"
                        FontSize="16"
                        Foreground="White">

                        <!--  Button styling for hover effect  -->
                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="#28AEED" />
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#278BEF" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>

                        <!--  Custom button template for round appearance  -->
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Border
                                    Width="18"
                                    Height="18"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="9">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                    <!--  Close button with custom style and click event handler  -->
                    <Button
                        x:Name="BtnClose"
                        Grid.Column="1"
                        Margin="5"
                        BorderThickness="0"
                        Click="BtnClose_Click"
                        Content="X"
                        Cursor="Hand"
                        FontFamily="Montserrat"
                        FontSize="12"
                        Foreground="White">

                        <Button.Style>
                            <Style TargetType="Button">
                                <Setter Property="Background" Value="#DA34AE" />
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="#C62DAE" />
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>
                        <Button.Template>
                            <ControlTemplate TargetType="Button">
                                <Border
                                    Width="18"
                                    Height="18"
                                    Background="{TemplateBinding Background}"
                                    CornerRadius="9">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                                </Border>
                            </ControlTemplate>
                        </Button.Template>
                    </Button>

                </Grid>

            </Grid>

            <!--  Display area for topic name dynamically bound to the ViewModel  -->
            <TextBlock
                x:Name="Topic"
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Margin="10"
                HorizontalAlignment="Center"
                FontSize="20"
                FontWeight="Bold"
                Foreground="Green"
                Text="{Binding TopicName}" />

            <!--  Dynamic display of the current question from the ViewModel  -->
            <TextBlock
                x:Name="Question"
                Grid.Row="0"
                Grid.RowSpan="2"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Margin="15"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="35"
                FontWeight="Bold"
                Foreground="White"
                Text="{Binding QuestionText}"
                TextWrapping="Wrap"
                Visibility="{Binding Updated, Converter={StaticResource BoolToVis}}" />

            <!--  Display of error or status messages from the ViewModel  -->
            <TextBlock
                x:Name="Message"
                Grid.Row="1"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Margin="10"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                FontSize="20"
                FontWeight="Bold"
                Foreground="{Binding Message.MessageColor}"
                Text="{Binding Message.MessageText}"
                TextWrapping="Wrap" />

            <!--  Nested grid for boosters and interactive controls with background and border styles  -->
            <Grid
                Grid.Row="1"
                Grid.Column="2"
                Margin="15,0,15,15"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Opacity="0.6">

                <Grid.RowDefinitions>
                    <RowDefinition Height="*" />
                    <RowDefinition Height="*" />
                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="100" />
                </Grid.ColumnDefinitions>

                <!--  Button to activate the half booster feature with an icon from FontAwesome  -->
                <Button
                    x:Name="HalfBoosterButton"
                    Grid.Row="0"
                    Grid.Column="1"
                    Margin="0,0,0,10"
                    Command="{Binding HalfBoosterCommand}"
                    IsEnabled="{Binding HalfBoosterStatus}"
                    Style="{StaticResource CustomButtonStyle1}">

                    <fa:IconImage
                        Margin="10"
                        Foreground="White"
                        Icon="Cut" />

                </Button>

                <!--  Button to simulate a phone-a-friend help option  -->
                <Button
                    x:Name="PhoneBoosterButton"
                    Grid.Row="2"
                    Grid.Column="1"
                    Margin="0,0,0,10"
                    Command="{Binding FriendPhoneCommand}"
                    IsEnabled="{Binding PhoneFriendHelpStatus}"
                    Style="{StaticResource CustomButtonStyle1}">
                    <fa:IconImage
                        Margin="10"
                        Foreground="White"
                        Icon="Phone" />
                </Button>

                <!--  Button for audience polling help  -->
                <Button
                    x:Name="AudienceBoosterButton"
                    Grid.Row="1"
                    Grid.Column="1"
                    Margin="0,0,0,10"
                    Command="{Binding AudienceHelpCommand}"
                    IsEnabled="{Binding AudienceHelpStatus}"
                    Style="{StaticResource CustomButtonStyle1}">

                    <fa:IconImage
                        Margin="10"
                        Foreground="White"
                        Icon="Users" />

                </Button>

            </Grid>


            <!--  Grid for displaying multiple choice answers, styled dynamically based on ViewModel states  -->
            <Grid
                Grid.Row="2"
                Grid.Column="0"
                Grid.ColumnSpan="2"
                Margin="10,0,10,0"
                Opacity="1"
                Visibility="{Binding Updated, Converter={StaticResource BoolToVis}}">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <!--  Individual buttons for each answer option, styled and bound to specific commands  -->
                <!--  Answer 1 button with dynamic content and background based on game state  -->
                <Button
                    x:Name="Answer1"
                    Margin="15,22,10,5"
                    Background="{Binding Answer1Background}"
                    Command="{Binding AnswerCommand}"
                    CommandParameter="0"
                    Content="{Binding Answer1.AnswerText}"
                    Cursor="Hand"
                    FontSize="25"
                    FontWeight="Bold"
                    Foreground="White"
                    IsEnabled="{Binding Answer1.IsActive}">

                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="15">
                                <TextBlock
                                    Padding="10"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Text="{TemplateBinding Content}"
                                    TextWrapping="Wrap" />
                            </Border>
                        </ControlTemplate>
                    </Button.Template>

                </Button>

                <!--  Answer 2 button with dynamic content and background based on game state  -->
                <Button
                    x:Name="Answer2"
                    Grid.Row="0"
                    Grid.Column="1"
                    Margin="0,22,10,5"
                    Command="{Binding AnswerCommand}"
                    CommandParameter="1"
                    Content="{Binding Answer2.AnswerText}"
                    Cursor="Hand"
                    FontSize="25"
                    FontWeight="Bold"
                    Foreground="White"
                    IsEnabled="{Binding Answer2.IsActive}">

                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{Binding Answer2Background}" CornerRadius="15">
                                <TextBlock
                                    Padding="10"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Text="{TemplateBinding Content}"
                                    TextWrapping="Wrap" />
                            </Border>
                        </ControlTemplate>
                    </Button.Template>

                </Button>

                <!--  Answer 1 button with dynamic content and background based on game state  -->
                <Button
                    x:Name="Answer3"
                    Grid.Row="1"
                    Grid.Column="0"
                    Margin="15,5,10,22"
                    Background="{Binding Answer3Background}"
                    Command="{Binding AnswerCommand}"
                    CommandParameter="2"
                    Content="{Binding Answer3.AnswerText}"
                    Cursor="Hand"
                    FontSize="25"
                    FontWeight="Bold"
                    Foreground="White"
                    IsEnabled="{Binding Answer3.IsActive}">

                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="15">
                                <TextBlock
                                    Padding="10"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Text="{TemplateBinding Content}"
                                    TextWrapping="Wrap" />
                            </Border>
                        </ControlTemplate>
                    </Button.Template>
                </Button>

                <!--  Answer 1 button with dynamic content and background based on game state  -->
                <Button
                    x:Name="Answer4"
                    Grid.Row="1"
                    Grid.Column="1"
                    Margin="0,5,10,22"
                    Background="{Binding Answer4Background}"
                    Command="{Binding AnswerCommand}"
                    CommandParameter="3"
                    Content="{Binding Answer4.AnswerText}"
                    Cursor="Hand"
                    FontSize="25"
                    FontWeight="Bold"
                    Foreground="White"
                    IsEnabled="{Binding Answer4.IsActive}">

                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="15">
                                <TextBlock
                                    Padding="10"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Text="{TemplateBinding Content}"
                                    TextWrapping="Wrap" />
                            </Border>
                        </ControlTemplate>
                    </Button.Template>

                </Button>

            </Grid>

            <!--  Grid system for the buttons and score  -->
            <Grid
                Grid.Row="2"
                Grid.Column="2"
                Margin="0,20,20,0"
                Opacity="0.8">

                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="150" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>

                <!--  A button for update data with custom styling  -->
                <Button
                    x:Name="UpdateData"
                    Grid.Column="1"
                    Margin="8"
                    Command="{Binding UpdateDataCommand}"
                    Content="Frissítés"
                    FontSize="25"
                    FontWeight="Bold"
                    Foreground="White">

                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Background" Value="#50BFE6" />
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{DynamicResource color12}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="30">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Button.Template>

                </Button>

                <!--  A button for start the game with custom styling  -->
                <Button
                    x:Name="StartGame"
                    Grid.Row="1"
                    Grid.Column="1"
                    Margin="8"
                    Command="{Binding StartGameCommand}"
                    Content="Start"
                    FontSize="25"
                    FontWeight="Bold"
                    Foreground="White">

                    <Button.Style>
                        <Style TargetType="Button">
                            <Setter Property="Background" Value="Green" />
                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="DarkGreen" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <Button.Template>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}" CornerRadius="30">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Button.Template>

                </Button>

                <!--  A Stackable panel for the user score  -->
                <StackPanel
                    Grid.Row="2"
                    Grid.RowSpan="2"
                    Grid.Column="1"
                    Margin="0,20,0,0"
                    VerticalAlignment="Top"
                    Orientation="Vertical">

                    <TextBlock
                        x:Name="Score"
                        Margin="0,0,0,10"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        FontSize="25"
                        FontWeight="Bold"
                        Foreground="White"
                        Text="Pontszám" />

                    <TextBlock
                        x:Name="ScoreInt"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        FontSize="30"
                        FontWeight="Bold"
                        Foreground="White"
                        Text="{Binding Score}" />
                </StackPanel>

            </Grid>

        </Grid>

    </Border>

</Window>
